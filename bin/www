#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled1:server');
var http = require('http');
var express = require('express');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('server avaible http://127.0.0.1:3000/');

var io = require('socket.io')(server);
io.sockets.on('connection', function(socket) {
	console.log('Connection');
	var secure='download';
	app.get('/'+secure, function(req, res) {
		res.download(__dirname + '/../intro.mp3'); // Set disposition and send it.
	});
	socket.emit('recu','http://192.168.137.101:3000/'+secure);

});
/*

var fs = require('fs');
var path = require('path');
http.createServer(function (request, response) {
    console.log('request starting...');

	var filePath = '.' + request.url;
	if (filePath == './')
		filePath = './intro.mp3';

	var extname = path.extname(filePath);
	var contentType = 'text/html';
	switch (extname) {
		case '.js':
			contentType = 'text/javascript';
			break;
		case '.css':
			contentType = 'text/css';
			break;
		case '.mp3':
			contentType = 'audio/mpeg';
			break;

	}

	fs.exists(filePath, function(exists) {

		if (exists) {
			fs.readFile(filePath, function(error, content) {
				if (error) {
					response.writeHead(500);
					response.end();
				}
				else {
					response.writeHead(200, { 'Content-Type': contentType , 'Content-Disposition': filename="music.mp3"});
					response.end(content, 'utf-8');
				}
			});
		}
		else {
			response.writeHead(404);
			response.end();
		}
	});

}).listen(8125);
console.log('Server running at http://127.0.0.1:8125/');*/

/**
 * Event listener for HTTP server "error" event.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}


function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}


function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}